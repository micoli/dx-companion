package org.micoli.dxcompanion.ui.components;

import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.KeyboardShortcut;
import com.intellij.openapi.keymap.KeymapManager;
import com.intellij.openapi.util.IconLoader;
import com.intellij.ui.treeStructure.Tree;
import org.micoli.dxcompanion.configuration.models.AbstractNode;
import org.micoli.dxcompanion.configuration.models.Action;
import org.micoli.dxcompanion.configuration.models.ObservedFile;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import java.awt.event.InputEvent;

public class DynamicTreeNode extends DefaultMutableTreeNode {
    private String label;
    private String tooltip = null;
    protected Icon icon;
    protected String actionId = null;
    private Runnable action;
    protected final Tree tree;

    DynamicTreeNode(Tree tree, AbstractNode configurationNode, Icon icon) {
        super(configurationNode);
        this.tree = tree;
        this.label = configurationNode.label;
        if (configurationNode instanceof Action _action && _action.shortcut!=null){
            this.tooltip = _action.shortcut;
        }
        if (configurationNode instanceof ObservedFile _observedFile && _observedFile.shortcut!=null){
            this.tooltip = _observedFile.shortcut;
        }
        this.icon = icon;
    }


    protected void setAction(Runnable action) {
        this.action = action;
    }

    public Runnable getAction() {
        return action;
    }

    protected void setLabel(String label) {
        this.label = label;
    }

    public String getLabel() {
        return this.label;
    }

    protected void setIcon(Icon icon) {
        this.icon = icon;
    }

    public Icon getIcon() {
        return icon;
    }

    protected void registerShortcut(String label, String shortcut, Runnable commandAction) {
        if (shortcut == null) {
            return;
        }
        actionId = "org.micoli.dxcompanion.action." + label.replaceAll("\\s+", "_");

        DynamicShortcutAction action = new DynamicShortcutAction(
            label,
            "Dynamic action generated by DxCompanion",
            DxIcon.Execute,
            commandAction
        );

        ActionManager.getInstance().registerAction(actionId, action);
        KeymapManager.getInstance().getActiveKeymap().addShortcut(actionId, parseKeyboardShortcut(shortcut));
    }


    public void unregisterShortcut() {
        if (actionId == null) {
            return;
        }
        KeymapManager.getInstance().getActiveKeymap().removeAllActionShortcuts(actionId);
        ActionManager.getInstance().unregisterAction(actionId);
    }

    private KeyboardShortcut parseKeyboardShortcut(String shortcutString) {
        String[] parts = shortcutString.split("\\s+");
        int modifiers = 0;
        String key = "";

        for (int i = 0; i < parts.length; i++) {
            String part = parts[i].toLowerCase();
            if (i == parts.length - 1) {
                key = part;
            } else {
                if (part.equals("ctrl")) modifiers |= InputEvent.CTRL_DOWN_MASK;
                if (part.equals("alt")) modifiers |= InputEvent.ALT_DOWN_MASK;
                if (part.equals("shift")) modifiers |= InputEvent.SHIFT_DOWN_MASK;
                if (part.equals("meta")) modifiers |= InputEvent.META_DOWN_MASK;
            }
        }

        return new KeyboardShortcut(KeyStroke.getKeyStroke(key.toUpperCase().charAt(0), modifiers), null);
    }

    public String getTooltip() {
        return tooltip;
    }
}